# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
# https://github.com/sxyazi/yazi/blob/shipped/yazi-config/preset/yazi-default.toml
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio = [1, 2, 2]
sort_by = "mtime"
sort_reverse = true
sort_dir_first = true
sort_sensitive = false
linemode = "size_and_mtime"
show_hidden = true
show_symlink = true
scrolloff = 5

[preview]
wrap = "no"
tab_size = 2

[opener]
edit = [
	{ run = 'nvim "$@"', block = true, for = "unix", desc = "Edit" },
	{ run = "nvim %*",  block = true, for = "windows", desc = "Edit" },
	{ run = '[ -f "$1" ] && { code "${1:h}"; sleep 1; code -g "$1"; } || code "$1"', desc = "Open in VSCode" }
]
extract = [
	{ run = 'ouch d -y "$@"', desc = "Extract here", for = "unix" },
	{ run = 'ya pub extract --list %*',   desc = "Extract here", for = "windows" },
]
reveal = [
	{ run = 'xdg-open "$(dirname "$1")"',           desc = "Reveal", for = "linux" },
	{ run = 'open -R "$1"',                         desc = "Reveal", for = "macos" },
	{ run = 'explorer /select,"%1"', orphan = true, desc = "Reveal", for = "windows" },
]
play = [
	{ run = 'open "$@"', for = "macos", desc = "Play" },
	# { run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
	{ run = 'mpv --force-window %*', orphan = true, for = "windows" },
	{ run = 'l=$(echo "$1" | grep -Eq "\.m3u$" && echo loadlist || echo loadfile); ~/.local/bin/iina $l "$1" append', desc = "Append to playlist" }
]
load_sub = [
	{ run = '~/.local/bin/iina sub-add "$1"', orphan = true, desc = "Load subtitle" }
]
uninstall_app = [
	{ run = 'open "$1" -a AppCleaner', desc = "Uninstall app" }
]
image = [
	{ run = '~/.local/bin/copy-img "$1"', desc = "Copy image" },
	{ run = '~/.local/share/npm/bin/picgo u "$1"', desc = "Upload image" }
]
open_db = [
	{ run = 'lazysql "$1"', block = true, desc = "Open database" }
]
osascript = [
	{ run = 'osascript "$1"', desc = "Run AppleScript" }
]

[open]
prepend_rules = [
	{ mime = "image/*", use = ["open", "reveal", "image"] },
	{ name = "*.m3u", use = ["play", "edit", "reveal"] },
	{ name = "*.{ass,srt,sub}", use = ["load_sub", "edit"] },
	{ name = "*.app/", use = ["open", "uninstall_app"] },
	{ mime = "application/sqlite3", use = ["open_db", "open"] },
	{ name = "*.scpt", use = ["open", "osascript", "reveal" ]}
]

[tasks]
micro_workers = 10
macro_workers = 25
bizarre_retry = 5
image_alloc = 536870912  # 512MB
image_bound = [0, 0]
suppress_preload = false

[plugin]
prepend_previewers = [
	{ mime = "image/vnd.djvu", run = "noop" },
	# Archive
	{ mime = "application/{zip,gzip,tar,bzip*,7z-compressed,xz,rar}", run = "ouch" },
]

prepend_fetchers = [
	{ id = "git", name = "*", run = "git" },
	{ id = "git", name = "*/", run = "git" },
	{ id = "mactag", name = "*", run = "mactag" },
	{ id = "mactag", name = "*/", run = "mactag" },
]

[which]
sort_by = "key"

[log]
enabled = false
