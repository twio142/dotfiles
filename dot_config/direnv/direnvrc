use_bw_session() {
  if [[ -z "$BW_SESSION" ]]; then
    export BW_SESSION="$(security find-generic-password -w -a "$USER" -s "bitwarden_cli_session" 2>/dev/null)"
  fi

  local bw_status
  bw_status=$(bw status 2>/dev/null | jq -r '.status')

  local new_session=""

  if [[ "$bw_status" == "unauthenticated" ]]; then
    new_session="$(bw login --raw 2>/dev/null)"
    bw_status=$(bw status 2>/dev/null | jq -r '.status')
  fi

  if [[ "$bw_status" == "locked" ]]; then
    local pw
    pw="$(security find-generic-password -w -s "vault.bitwarden.eu" 2>/dev/null)"
    if [[ -z "$pw" ]]; then
      new_session="$(bw unlock --raw 2>/dev/null)"
    else
      new_session="$(bw unlock "$pw" --raw 2>/dev/null)"
    fi
  fi

  if [[ -n "$new_session" ]]; then
    export BW_SESSION="$new_session"
    security add-generic-password -a "$USER" -s "bitwarden_cli_session" -w "$BW_SESSION" -U
  fi
}

keychain() {
  if [[ "$1" == get && -n "$2" ]]; then
    security find-generic-password -w -a shell -s "$2" 2>/dev/null
  fi
}

load_workflow() {
  [ -f ./info.plist ] || return 1

  local cacheDir=~/Library/Caches/com.runningwithcrayons.Alfred/Workflow\ Data
  local dataDir=~/Library/Application\ Support/Alfred/Workflow\ Data
  local syncDir=$(defaults read com.runningwithcrayons.Alfred-Preferences syncfolder | sed "s|^\~|$HOME|")

  unset alfred_workflow_name
  unset alfred_workflow_uid
  unset alfred_workflow_bundleid
  unset alfred_workflow_cache
  unset alfred_workflow_data

  export alfred_preferences=$syncDir/Alfred.alfredpreferences
  export alfred_workflow_name=$(plutil -convert json -o - ./info.plist | jq -r '.name')
  export alfred_workflow_uid=$(basename $PWD)
  export alfred_workflow_bundleid=$(plutil -convert json -o - ./info.plist | jq -r '.bundleid // empty')

  [[ -n "${alfred_workflow_bundleid}" ]] && {
    export alfred_workflow_cache=$cacheDir/$alfred_workflow_bundleid
    export alfred_workflow_data=$dataDir/$alfred_workflow_bundleid
  }

  while read -r line; do
    export "$line"
  done < <(plutil -convert json -o - ./info.plist | jq -r '.variables // {} | to_entries | .[] | "\(.key)=\(.value // empty)"')

  while read -r line; do
    export "$line"
  done < <(plutil -convert json -o - ./info.plist | jq -r '.userconfigurationconfig.[] | "\(.variable)=\("\(.config.default)" | sub("^~\/"; "'$HOME'/") | sub("\n"; "\\n"; "g") // .config.defaultValue // "")"')

  if [[ -f ./prefs.plist ]]; then
    while read -r line; do
      export "$line"
    done < <(plutil -convert json -o - ./prefs.plist | jq -r 'to_entries | .[] | "\(.key)=\("\(.value)" | sub("^~\/"; "'$HOME'/") | sub("\n"; "\\n"; "g"))"')
  fi
}

mamba_env() {
  eval "$(mamba shell hook --shell bash)"
  mamba activate $1
}
